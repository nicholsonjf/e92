Project plan

~ Port shell to K70 (done)

~ Implement struct stream

~ Add struct stream *streams[32] to struct PCB

~Implement function to add file pointers to pcb.streams
    -Returns the position of pointer in the array
    -If the stream is successfully added, success is set to 1.
    -[int put_stream(int *success)]

~Implement struct file, a representation of plain file
    -Will have major_id and minor_id members
        ~Example: "/dev/led/green" major_id=led, minor_id=green
        ~Example: "files/notes.txt" major_id=fat32, minor_id=first_cluster_number

~Implement fopen (path, mode) shell command
    -map it to [int cmd_fopen (path, mode)]
    -cmd_fopen calls [struct file find_by_name (path)]
        ~If filename starts with "/dev" handle it differently, look for
        plain file created during init like "/dev/led/blue"
    -cmd_fopen uses the return value from find_by_name and
    calls [struct device find_by_device_id (major_id)]
    -cmd_fopen calls [int get_mode_id(char *mode)] to convert mode string to an int
    -cmd_fopen calls [file* device.fopen(char *minor_id, int mode)]
    -cmd_fopen calls put_stream to add the return value from device.fopen to pcb.streams
    -cmd_fopen returns the value from put_stream (i.e. the "file descriptor") to the user

~//TODO
    -Refactor "help" shell command
        ~Provide it with unformatted strings and use printf rules to format output

~Ask Jamie about
    -How much time to budget to finish
    -Overview of how to implement cache and how long it will take

~Cache
    -Implement int cache_read_single_block(uint32_t sector_num, uint8_t *data)
        -Return error code if card not mountd
    -Whenever you read, read from cache
        ~If cache doesn't have valid sector
            -Read sector from disk into cache buffer
        ~Else, check current cache sector number
        ~If sector requested is same in cache
            -Copy data from cache buffer into user provided pointer
        ~If not the same sector
            -Check if cache is modified
                ~If modified, write sector in cache to disk
                    -Then read requested sector into cache buffer, copy to user provided pointer address
                ~If not modified, read sector from disk, save in cache buffer, and copy into user pointer address

    -Whenever you write, write to cache
        -Implement int cache_write_single_block(uint32_t sector_num, uint8_t *data)
        ~If cache doesn't have valid sector
            -Copy caller sector to cache buffer
            -Set the sector number, mark it as valid, mark it as modified
        ~Else, check sector number of cache
        ~If sector number writing to is same as sector in cache
            -Copy caller sector to cache buffer
            -Mark it as modified
        ~Else
            -Check if cache is modified
                ~If modified, write cache to disk
                ~Copy caller sector to cache
                ~Update sector number
            -Else
                ~Copy caller sector to cache buffer
                ~Update sector number
                ~Mark as modified

    -Implement flush_cache function
        ~If cache contains sector that is valid and modified
            -Write sector to disk
    
    -Before unmount:
        ~Call flush_cache